load("~/Google Drive/CE 290 Project/Data Collection/Prices/R code/MyProcessed2013LMP_Data.RData")
View(myCasting)
View(myCasting)
setwd("~/Documents/Research/Energy Storage/Regressions/Weather/forecastIO")
Sys.Date()
Sys.time()
a <- Sys.time()
a
type(a)
class(a)
d = Sys.Data()
d = Sys.Date()
d + 86400
d
class(d)
d+1
(d+1)-a
as.POSIXct(d+1)-a
as.POSIXct(d+1,"")-a
as.POSIXct(d+1,"America/Los Angeles")-a
as.POSIXct(Sys.Date())-Sys.time()
Sys.time()
midnight = as.POSIXct("2015-03-20 00:00:00 PDT","Ameria/Los Angeles")
midnight = as.POSIXct("2015-03-20 00:00:00 PDT","America/Los Angeles")
midnight = as.POSIXct("2015-03-20 00:00:00 PDT",tz="America/Los Angeles")
midnight = as.POSIXct("2015-03-20 00:00:00 PDT")
midnight
midnight - as.POSIXct(Sys.Date())
summary(Sys.Date())
midnight = as.POSIXct("2015-03-20 00:00:00 PDT",tz="America/Los_Angeles")
midnight-Sys.time()
midnight = as.POSIXct(Sys.Date(),tz="America/Los_Angeles")
midnight-Sys.time()
datetimelt <- as.POSIXlt(Sys.time(),tz="America/Los_Angeles")
datetimedate <- as.Date(datetimelt)
datetimelt - datetimedate
datetimelt - as.POSIXlt(datetimedate,tz="America/Los_Angeles")
twomins = as.POSIXct("2015-03-20 14:23:00 PDT",tz="America/Los_Angeles")"
twomins = as.POSIXct("2015-03-20 14:23:00 PDT",tz="America/Los_Angeles")
twomins = as.POSIXct("2015-03-20 14:23:00 PDT",tz="America/Los_Angeles")
sleeptime = twomins - Sys.time()
Sys.sleep(sleeptime)
as.posixct(trunc(Sys.time(),units="days"))
as.POSIXct(trunc(Sys.time(),units="days"))
a = as.POSIXct(trunc(Sys.time(),units="days"))
b = as.POSIXct(Sys.time())
b-a
(b+1)-a
as.seconds(b-a)
as.Seconds(b-a)
c = b-a
class(c)
as.double(c,units="secs")
3600*14
secsTillMidnight <- as.double( as.posixct(trunc(sys.time(),units="days") + 24*3600 - Sys.time()), units="secs")
secsTillMidnight <- as.double( as.POSIXct(trunc(sys.time(),units="days") + 24*3600 - Sys.time()), units="secs")
secsTillMidnight <- as.double( as.POSIXct(trunc(Sys.time(),units="days") + 24*3600 - Sys.time()), units="secs")
secsTillMidnight <- as.double( Sys.time() + 24*3600 - as.POSIXct(trunc(Sys.time(),units="days")), units="secs")
9*2600
9*3600
1440770/3600
Sys.time() + 24*3600
trunc(Sys.time(),units="days")
Sys.time() + 24*3600 - trunc(Sys.time(),units="days")
Sys.time() - trunc(Sys.time(),units="days")
24*3600 - (Sys.time() - trunc(Sys.time(),units="days"))
24 - Sys.time() + trunc(Sys.time(),units="days")
24 - (Sys.time() + trunc(Sys.time(),units="days"))
24 + (Sys.time() - trunc(Sys.time(),units="days"))
Sys.time() - as.POSIXct(trunc(Sys.time(),units="days"))
24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days")))
24 - Sys.time() + as.POSIXct(trunc(Sys.time(),units="days"))
source('~/Documents/Coding/github/bGridDatabaseTools/pgForecastIO/pgForecastIO_driverExample.R')
install.packages("RPostgreSQL")
require("Rforecastio")
setwd("~/Documents/Coding/github/bGridDatabaseTools/pgForecastIO")
apikey   <- readLines('forecastiokey.txt')[1]
psqlpass <- readLines('pgsqlpw.txt')[1]
myPoints = read.csv("myFile.csv")
myPoints = read.csv("LMPLocations.csv")
b = c("apple","banana")
b[1]
dailyCalls = 100
callCount = 0 # this will be our counter of days
for (row in myPoints){
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row['name']))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
for (row in myPoints[0:50,]){
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row$name))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
install.packages("RPostgreSQL")
source('~/Documents/Coding/github/bGridDatabaseTools/pgForecastIO/pgForecastIO_driverExample.R')
install.packages("Rforecastio")
library(devtools)
install_github("Rforecastio","hrbrmstr")
for (row in myPoints[0:50,]){
class(row)
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row$name))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
for (row in myPoints[0:50,]){
class(row)
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row['name']))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
for (row in myPoints[0:50,]){
class(row)
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row['name'], "with call count", callCount))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
dailyCalls = 5
for (row in 1:10 ){  # could also use an apply function, but would be less usable
class(row)
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",row[i,'name'], "with call count", callCount))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
for (i in 1:10 ){  # could also use an apply function, but would be less usable
class(row)
if (callCount < dailyCalls){
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
print(paste("Processed node ",myPoints[i,'name'], "with call count", callCount))
#callCount = callCount + dim(newCalls)[1]
callCount = callCount + 1
}else{
# We've hit our call count; wait until midnight and then go ahead
print("Call limit reached; sleeping until midnight")
secsTillMidnight <- as.double(24 - (Sys.time() - as.POSIXct(trunc(Sys.time(),units="days") ) ) )  #Awkward, but this works... times in R are a headache
Sys.sleep(2)
callCount = 0
#newCalls = FIOWeatherGetDataAtAllCosts(latitude = lat, longitude = lon, timebounds = tbounds, dbcon =wcon, apikey = apikey, verbose = TRUE, callCount = TRUE)[1]
#callCount = callCount + dim(newCalls)[1]
}
}
nrows(b)
nrows(myPoints)
nrow(myPoints)
nrow(b)
dim(myPoints)[1]
dim(b)[1]
dim(b)
size(b)
shape(b)
length(myPoints$name)
length(myPoints)
source('~/Documents/Coding/github/bGridDatabaseTools/pgForecastIO/pgForecastIO_driverExample.R')
source('~/Documents/Coding/github/bGridDatabaseTools/pgForecastIO/pgForecastIO_driverExample.R')
